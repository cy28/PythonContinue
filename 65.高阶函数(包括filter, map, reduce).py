from functools import reduce
"""
一个函数接收另外一个函数作为参数, 一个函数被当做另外一个函数的返回值, 这种函数的使用方式, 我们称为高阶函数
"""

# 1. 系统高阶函数 max min stored

m1 = max(5, 9)
print(m1)

m2 = max([2, 4, 67, 8, 9])
print(m2)

list1 = [('tom', 19), ('tony', 20), ('lily', 18), ('daniel', 21), ('rose', 22)]
# 现在给定以上列表, 我们想找出年龄最大的那个

# max() 函数有一个可选参数 key，它指定一个函数，用于将每个元素映射为一个可比较的值。然后，max() 函数将基于这些可比较的值来计算最大值。

m = max(list1, key=lambda x: x[1])  # key后面接的是要比较的对象(排序的依据)
print(m)  # ('rose', 22)

# 对上面的列表, 按照年龄进行排序

list2 = sorted(list1, key=lambda x: x[1])
print(list2)  # [('lily', 18), ('tom', 19), ('tony', 20), ('daniel', 21), ('rose', 22)]

# 降序
list3 = sorted(list1, key=lambda x: x[1], reverse=True)

# ------------------------------------------------------------------------------------------------------

# 2. filter map方法

# filter() 过滤方法

# filter()函数通过使用一个函数来过滤可迭代对象中的元素，仅保留满足特定条件的元素，并返回一个迭代器对象。过滤条件由传递给filter()函数的函数参数决定。
# filter() 内置类有两个参数，第一个参数是一个函数, 返回的是True或者False, 用于确定筛选条件，第二个参数是要过滤的迭代的对象

# 举例
# 我们想得到上述列表中的年龄大于20岁的元素

list4 = filter(lambda x: x[1] > 20, list1)
# 返回的是一个可迭代对象, 我们可以用列表接收

print(list(list4))  # [('daniel', 21), ('rose', 22)]


# map映射方法
# map() 内置类有两个参数，第一个参数是一个函数, 返回的是变化后的元素，第二个参数是要进行映射的迭代的对象

# 举例
# 将list1中所有的元素的年龄加1

list5 = map(lambda x: x[1] + 1, list1)
# 返回的是一个可迭代对象, 我们可以用列表接收

print(list(list5))  # [20, 21, 19, 22, 23] 返回的是元素中的某项值,而不是整个元素

# 3. reduce(消去)  对一个序列进行压缩运算, 最后得到一个值

"""
在 Python 中，reduce() 是一个内置函数，它用于对一个序列进行归约操作。
具体来说，reduce() 将一个可迭代对象中的元素，按照指定的规则进行合并，并返回合并后的结果。
reduce() 函数需要两个参数：一个函数和一个可迭代对象。函数用于指定归约规则，可迭代对象包含要归约的元素。
归约规则是一个二元函数，它接受两个参数，并返回一个值，这个值将作为下一次调用函数的第一个参数。

"""
# 语法
#   reduce(function, iterable[, initializer])

# 举例1
numbers1 = [1, 2, 3, 4, 5]
total = reduce(lambda x, y: x + y, numbers1)

# 1 + 2 = 3 再用1+2的和3去加3=6 再用6加4
print(total)  # 输出 15


# 举例2
numbers2 = [3, 5, 2, 8, 1]
max_num = reduce(lambda x, y: x if x > y else y, numbers2)

print(max_num)  # 输出 8

"""
在这个示例中，reduce() 函数使用 lambda 表达式作为归约函数，lambda 表达式接受两个参数 x 和 y，返回它们中的最大值。
reduce() 函数将列表 numbers 中的所有元素依次传递给 lambda 表达式，将它们中的最大值作为下一次调用 lambda 表达式的第一个参数。
最终，reduce() 函数将找到列表中的最大元素，并返回结果 8。
"""

# 其实就是0号位和1号位进行某种操作, 得到一个结果, 然后得到的结果再与2号位进行某种操作, 得到结果, 再与3号位操作, 以此直到结束


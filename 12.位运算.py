# 位运算符： 针对二进制进行的运算

# 1. & 按位与  1为真  0为假  每一位进行比较 同时为真取1 有一位假就取0
n1 = 0b0110  # 6
n2 = 0b0010  # 2
print(n1 & n2)  # 2 (0b0010)


# 2. | 按位或  有一位1 就为1
print(n1 | n2)  # 6 (0b0110)


# 3. ^ 异或   数位相同取0，不同取1
print(n1 ^ n2)  # 4 (0b0100)


# 4. ~ 按位取反  1 变 0   0 变 1

print(~n1)  # -7
# 首先一个整型，占32位           n1 = 0000 0000 0000 0000 0000 0000 0000 0110
# 按位取反后，计算机识别为一个负数，看成一个补码  ~n1 = 1111 1111 1111 1111 1111 1111 1111  1001
# 补码转化为原码，从右往左看，第一个1左边的数位全部取反，机可得到原码
# ~n1的原码是 1000 0000 0000 0000 0000 0000 0000 0111  所以结果为-7


# 5. << 左移运算符 同样是针对的二进制  向左平移末位补0  左移一位相当于乘2

n3 = 12   # n3 = 0000 0000 0000 0000 0000 0000 0000 1100

print(n3 << 2)  # 48 = 0000 0000 0000 0000 0000 0000 0011 0000  32 + 16 = 48 = 12 * 4


# 6. >> 右移运算符 针对二进制   向右平移末位补0       右移一位相当于除以2

print(n3 >> 2)   # 3 = 0000 0000 0000 0000 0000 0000 0000 0011 = 12 / 4

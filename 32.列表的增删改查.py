# 1. 列表添加元素

# append() 向列表的尾部添加元素
"""
注意
1. 追加单个元素时，直接把元素放在函数内部即可
2. 若要一次性追加多个元素，需要以列表的形式追加，此时原来的一维列表变为二维列表
"""
list1 = ['西施', '赵飞燕', '王昭君', '杨玉环']

print(list1)            # ['西施', '赵飞燕', '王昭君', '杨玉环']

list1.append('貂蝉')
print(list1)            # ['西施', '赵飞燕', '王昭君', '杨玉环', '貂蝉']

list1.append(['乾隆', '越王勾践'])
print(list1)            # ['西施', '赵飞燕', '王昭君', '杨玉环', '貂蝉', ['乾隆', '越王勾践']]

# extend()    像列表尾部追加多个元素，而不改变列表的维度, 若在尾部添加一个元素，会把元素做一次拆分
list1.extend(['康熙', '雍正'])
print(list1)  # ['西施', '赵飞燕', '王昭君', '杨玉环', '貂蝉', ['乾隆', '越王勾践'], '康熙', '雍正']

list1.extend('秦始皇')
print(list1)  # # ['西施', '赵飞燕', '王昭君', '杨玉环', '貂蝉', ['乾隆', '越王勾践'], '康熙', '雍正', '秦', '始', '皇']

# insert() 在列表的指定索引处追加元素, 参数一：要追加的位置,   参数二：要追加的元素
list2 = ["刘备", '关羽', '张飞', '吕布']

list2.insert(1, "曹操")  # 在一这个位置添加新元素   ['刘备', '曹操', '关羽', '张飞', '吕布']
print(list2)

# 若想使用insert一次性追加多个元素，追加的元素以列表得形式追加，会改变原来列表的维度
list2.insert(0, ['袁绍', '孙权'])
print(list2)  # [['袁绍', '孙权'], '刘备', '曹操', '关羽', '张飞', '吕布']


"""
总结: + 号在Python中的使用
    1. 在数学运算中, 表示加法
    2. 字符串拼接   "aa" + "bb" == "aabb"
    3. 列表的合并    [1, 2, 3] + ['A', 'B'] == [1, 2, 3, 'A', 'B']
"""


# 2. 列表中元素的删除和清除操作
list3 = ['西游记', '红楼梦', '西游记', '三国演义', '水浒传']

# pop(下标) 传入的参数是要删除元素的下标，如果不传入参数，则默认删除最后一个元素
list3.pop()  # 这里没有传入参数，默认删除列表的最后一个元素
print(list3)  # ['西游记', '红楼梦', '西游记', '三国演义']

list3.pop(1)
print(list3)  # ['西游记', '西游记', '三国演义']  删除的是下标为1的元素

# remove(要删除的参数)  传入的参数是要删除的元素, 但是只删除遇到的第一个元素
list3.remove('西游记')  # 删除传入的参数
print(list3)   # ['西游记', '三国演义']

# del 删除操作  如果 del list3, 相当于断掉了list3指向内存空间的指针, 同时回收了变量名
del list3[0]
print(list3)  # ['三国演义']

# clear() 清空列表
list3.clear()
print(list3)  # []


# 3. 判断指定元素是否在列表中   通过in 和 not in 进行判断 返回True和False
list4 = ['hello', 'world', '你好', '呵呵', 124, 56]
print('呵呵' in list4)  # True
print('哈哈' in list4)  # False


# 4. 列表元素的修改,通过下标直接进行修改
list5 = [1, 2, 3, 4, 5, 6]
list5[1] = 9
print(list5)  # [1, 9, 3, 4, 5, 6]


# 5. 列表元素的查找 index(元素) 返回该元素在列表中的位置
p = list5.index(6)
print(p)  # 5

# 6. 判断元素是否在列表中 count(元素)  返回为0, 则表示不存在该元素, 存在则返回个数
print(list5.count(7))  # 0

# 只要你导入包, 就会默认执行__init__里面的内容

"""
__init__.py 文件是一个特殊的文件名，在 Python 包中用于标识包的初始化文件。当一个目录被视为 Python 包时，它通常包含一个名为 __init__.py 的文件。

__init__.py 文件在包的导入和初始化过程中起着重要的作用。它可以包含一些初始化代码，用于设置包的环境、导入必要的模块或执行其他操作。

此外，它还可以定义在导入包时应该导出的内容。

"""

"""
import user_99
# 1. 在导入包或者包里的模块的时候会自动执行__init__里面的程序
from user_99 import module  # 这是user_99的__init__文件


# 2. 对于__init__里面的函数 可以直接通过包名.函数调用
user_99.test()  # 这是user_99里面的一个函数
"""


"""
# 3. 在之前的情况中
from 模块名 import *  可以访问该模块中所有的内容
但是
from 包名 import * 按道理来说, 应该是可以访问该包中的所有的模块, 但是实际上并不是这样
需要结合__all__在__init__文件中定义, 才能使用相应的模块
"""

from user_99 import *
module.User('admin', 123)
# 可以使用module, 不能使用module2, 因为module2不在__init__文件的__all__变量中


# 作用
# 1. 当导入包时, 把一些初始化的函数, 变量, 类定义在__init__文件中
# 2. __init__文件中的函数, 变量等的访问, 只需要通过包名.函数...实现
# 3. from 模块名 import *
#     表示可以使用模块中的所有内容, 如果模块没定义__all__, 则所有的都可以访问, 但是如果添加了__all__, 就只能访问__all__列表中的内容
#    from 包名 import *
# 包中的模块都不能访问, 需要在__init__文件中用__all__设置可以访问的范围
















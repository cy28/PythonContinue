"""
引入:
假设我们有一个问题：如何把一只大象放进一个冰箱里面？

面向过程编程的解决方案可能如下：

1. 打开冰箱门。
2. 将大象推进冰箱。
3. 关闭冰箱门。
这个解决方案的思路是按照一个特定的顺序执行一系列操作，以达到预期的结果。它的重点是解决问题的步骤，而不是对象和它们之间的关系。

相比之下，面向对象编程更加注重对象之间的关系和交互。

下面是一个面向对象编程的解决方案：

1. 创建一个冰箱对象。
2. 创建一个大象对象。
3. 使用冰箱对象的 open_door() 方法打开冰箱门。
4. 使用大象对象的 walk_in() 方法将大象推进冰箱。
5. 使用冰箱对象的 close_door() 方法关闭冰箱门。
在这个解决方案中，我们定义了两个对象：一个是冰箱对象，另一个是大象对象。
每个对象都有自己的属性和方法，它们之间的关系和交互通过方法调用来实现。这种方式更加注重对象之间的交互和组合，而不是单纯的按照步骤执行操作。

总的来说，面向过程编程是基于一系列步骤的顺序执行，注重流程和算法的设计，
而面向对象编程是基于对象的交互和组合，注重对象之间的关系和行为的设计。

"""
"""
面向对象和面向过程的区别

a. 面向过程
面向过程编程是一种编程方法，它以过程和函数为基础，将程序分解为一系列的步骤，每个步骤都是一个函数或过程。
它将程序视为一系列的命令，每个命令按照顺序执行，以达到所需的结果。
面向过程编程通常用于较小的程序或单个任务，它关注的是如何完成特定的任务。

b. 面向对象
面向对象编程是另一种编程方法，它将程序看作是对象的集合，
每个对象都包含了数据和方法。对象可以互相通信，并通过彼此的方法来完成任务。
面向对象编程关注的是数据和它们的交互，而不是像面向过程编程一样只关注过程。
面向对象编程通常用于大型应用程序，它允许程序员更轻松地维护和扩展程序。

"""

"""
在 Python 面向对象编程中，有一些基本概念需要理解，这些概念包括：

类(Class)：类是对象的模板，它定义了一组属性和方法，用于创建对象。可以把类看作是一种抽象数据类型，它定义了对象的状态和行为。在 Python 中，可以使用 class 关键字定义类。

对象(Object)：对象是类的实例，它包含了类定义的属性和方法。每个对象都有自己的状态和行为，也可以调用类定义的方法。在 Python 中，可以使用类的构造函数 __init__() 来创建对象。

属性(Attribute)：属性是对象的状态信息，它们可以是数字、字符串、元组、列表、字典等类型的数据。在 Python 中，属性通常被定义为类的实例变量。

方法(Method)：方法是对象的行为信息，它们可以是函数或者方法。在 Python 中，方法通常被定义为类的实例方法，可以在对象上调用。

继承(Inheritance)：继承是一种机制，它允许子类继承父类的属性和方法。子类可以重写父类的方法，也可以添加新的属性和方法。在 Python 中，使用类定义时，可以通过继承来定义子类。

多态(Polymorphism)：多态是一种机制，它允许不同的对象使用相同的接口来调用方法。在 Python 中，多态通常通过定义一个公共的接口或者抽象类来实现。

封装(Encapsulation)：封装是一种机制，它将对象的状态和行为信息封装在一起，以保护对象的完整性和安全性。在 Python 中，封装可以通过定义类的私有属性和方法来实现。

"""

"""
# 定义类的格式

class ClassName:
    # class variables and methods

    def __init__(self, parameter1, parameter2, ...):  # 定义属性
        # constructor

    def method1(self, parameter1, parameter2, ...):   # 定义方法
        # method 1 definition

    def method2(self, parameter1, parameter2, ...):
        # method 2 definition

    # ...
"""


# 举例 类名的首字母要求大写, 采用驼峰式命名法

class Person:  # 定义一个名为Person的类

    # 属性
    def __init__(self, name, age):  # 定义属性的初始化方法，self表示对象本身，name和age是对象的属性
        self.name = name            # 初始化对象的name属性
        self.age = age              # 初始化对象的age属性

    # 方法
    def say_hello(self):            # 定义一个方法，输出问候语，self表示对象本身
        print(f"Hello, my name is {self.name}, and I am {self.age} years old.")


# 创建一个Person类的实例
person = Person("Alice", 25)  # 使用类创建一个对象

# 调用实例的方法
person.say_hello()  # 输出问候语







































